C51 COMPILER V9.00   TETRIS                                                                05/17/2023 19:41:50 PAGE 1   


C51 COMPILER V9.00, COMPILATION OF MODULE TETRIS
OBJECT MODULE PLACED IN .\output\Tetris.obj
COMPILER INVOKED BY: D:\Program Files (x86)\Keil\C51\BIN\C51.EXE src\Tetris.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\ou
                    -tput\Tetris.lst) OBJECT(.\output\Tetris.obj)

line level    source

   1          #include "config.h"
   2          
   3          #define NORSPEED 500    //正常游戏速度
   4          #define MAXSPEED 28             //按下DOWN键游戏速度
   5          #define KEYSET  50              //按键判断延时
   6          
   7          static char x=0,y=15;           //动态方块的位置标
   8          static uint8 boxID;                     //当前方块编号
   9          static uint8 showbox[4];        //动态方块缓存
  10          static uint8 sblock[16];        //静态方块缓存
  11          
  12          uint8 code getscore[5] = {0,1,3,7,15};  //一次消除行数得分
  13          uint8 code rotlist[19]={0,2,1,4,3,6,5,8,9,10,7,12,13,14,11,16,17,18,15};//方块旋转链表
  14          uint8 code blocks[19][4]=
  15          {
  16                  {0x00,0x00,0x18,0x18},  //田    0
  17                  {0x10,0x10,0x10,0x10},  // |    1
  18                  {0x00,0x00,0x00,0x3c},  // 一   2
  19                  {0x00,0x08,0x18,0x10},  //右竖  3
  20                  {0x00,0x00,0x30,0x18},  //      Z       4
  21                  {0x00,0x10,0x18,0x08},  //              5
  22                  {0x00,0x00,0x18,0x30},  //              6
  23                  {0x00,0x08,0x08,0x18},  //      」      7
  24                  {0x00,0x00,0x38,0x08},  //              8
  25                  {0x00,0x18,0x10,0x10},  //              9
  26                  {0x00,0x00,0x20,0x38},  //              10
  27                  {0x00,0x10,0x10,0x18},  //      L       11
  28                  {0x00,0x00,0x08,0x38},  //              12
  29                  {0x00,0x18,0x08,0x08},  //              13
  30                  {0x00,0x00,0x38,0x20},  //              14
  31                  {0x00,0x00,0x10,0x38},  //      凸      15
  32                  {0x00,0x08,0x18,0x08},  //              16
  33                  {0x00,0x00,0x38,0x10},  //              17
  34                  {0x00,0x10,0x18,0x10},  //              18
  35          };
  36          
  37          
  38          static void RandBox()   //随机装载一个方块
  39          {
  40   1              uint8 i;
  41   1              boxID = rand() % 19;
  42   1                 if(KEY_LEFT == 0 && KEY_RIGHT == 0)  boxID = 2;//游戏后门,你懂的！^.^
  43   1              for(i=0;i<4;i++)        //装载方块
  44   1              {
  45   2                      showbox[i] = blocks[boxID][3-i];//由于硬件布局的原因，倒序装载，方便点阵操作
  46   2              }
  47   1      }
  48          
  49          static char Check_LR(uint8 lr)  //0左1右;;可以移动返回1，遇到障碍返回0
  50          {
  51   1              uint8 i;
  52   1              if(lr)
  53   1              {
  54   2                      for(i=0;i<4;i++)
C51 COMPILER V9.00   TETRIS                                                                05/17/2023 19:41:50 PAGE 2   

  55   2                      {
  56   3                              if ((showbox[i] & 0x01) || (showbox[i] >>1 & sblock[i+y]))//边界，静态方块
  57   3                                      return 0;       //检测到移出边界既退出
  58   3                      }
  59   2                      return 1;
  60   2              }
  61   1              else 
  62   1              {
  63   2                      for(i=0;i<4;i++)
  64   2                      {
  65   3                              if((showbox[i] & 0x80) ||  (showbox[i] <<1 & sblock[i+y]))//
  66   3                                      return 0;       //检测到移出边界既退出
  67   3                      }
  68   2                      return 1;
  69   2              }
  70   1      }
  71          static void moveone(bit lr, uint8 *buf)
  72          {
  73   1              uint8 i;
  74   1              if(lr)
  75   1              {
  76   2                      for(i=0;i<4;i++)
  77   2                      {
  78   3                              buf[i] = buf[i]>>1;
  79   3                      }
  80   2              }
  81   1              else 
  82   1              {
  83   2                      for(i=0;i<4;i++)
  84   2                      {
  85   3                              buf[i] = buf[i]<<1;
  86   3                      }
  87   2              }
  88   1      }
  89          
  90          static char BoxMover(char lr,uint8 *buf)
  91          {
  92   1              char i,j;
  93   1              if(lr>0)
  94   1              {
  95   2                      for(j=0;j<lr;j++)
  96   2                      {
  97   3                              for(i=0;i<4;i++)
  98   3                              {
  99   4                                      if(buf[i] & 0x80)
 100   4                                      {       
 101   5                                              return  0;
 102   5                                      }
 103   4                                      buf[i] = buf[i] <<1;
 104   4                                      
 105   4                                      if(j+1 == lr)
 106   4                                              if(buf[i]  & sblock[i+y])
 107   4                                                      return  0;
 108   4                              }
 109   3                      }
 110   2                      return  1;
 111   2              }
 112   1              
 113   1              if(lr<0)
 114   1              {
 115   2                      for(j=0;j<(-lr);j++)
 116   2                      {
C51 COMPILER V9.00   TETRIS                                                                05/17/2023 19:41:50 PAGE 3   

 117   3                              for(i=0;i<4;i++)
 118   3                              {
 119   4                                      if(buf[i] & 0x01)
 120   4                                      {       
 121   5                                              return  0;
 122   5                                      }
 123   4                                      buf[i] = buf[i] >>1;
 124   4                                      
 125   4                                      if(j+1 == (-lr))
 126   4                                              if(buf[i]  & sblock[i+y])
 127   4                                                      return  0;
 128   4                              }
 129   3                      }
 130   2                      return  1;
 131   2              }
 132   1              return 1;       
 133   1      }
 134          
 135          static void SpinBox()
 136          {
 137   1              uint8 i,tmpid,tmpbuf[4]={0};
 138   1              tmpid = rotlist[boxID];
 139   1              for(i=0;i<4;i++)
 140   1                      tmpbuf[i] = blocks[tmpid][3-i];//根据链表，变换下一个图像
 141   1      
 142   1              if(x > 0)
 143   1              {
 144   2                      if(BoxMover(x,tmpbuf))
 145   2                      {
 146   3                              boxID = tmpid;
 147   3                              for(i=0;i<4;i++)
 148   3                                      showbox[i] = tmpbuf[i];
 149   3                      }
 150   2              }
 151   1      
 152   1              else if(x < 0)
 153   1              {
 154   2                      if(BoxMover(x,tmpbuf))
 155   2                      {
 156   3                              boxID = tmpid;
 157   3                              for(i=0;i<4;i++)
 158   3                                      showbox[i] = tmpbuf[i];
 159   3                      }
 160   2              }
 161   1              
 162   1              else
 163   1              {
 164   2                      bit f = 1;
 165   2                      for(i=0;i<4;i++)
 166   2                      {
 167   3                              if(tmpbuf[i] & sblock[i+y])
 168   3                              {
 169   4                                      f = 0;
 170   4                                      break;
 171   4                              }
 172   3                      }
 173   2                      if( f )
 174   2                      {       
 175   3                              for(i=0;i<4;i++)
 176   3                                      showbox[i] = tmpbuf[i];
 177   3                              boxID = tmpid;
 178   3                      }
C51 COMPILER V9.00   TETRIS                                                                05/17/2023 19:41:50 PAGE 4   

 179   2              }
 180   1      }
 181          static char Check_Down()        //检测方块下降一个是否与静态方块重叠
 182          {
 183   1              if((sblock[15] & showbox[0]) | (sblock[15] & showbox[1]))
 184   1                      return -1;
 185   1              
 186   1              if(y==0)                                                        return 1;
 187   1              if(sblock[y-1] & showbox[0])            return 1;
 188   1              if(sblock[y]   & showbox[1])            return 1;
 189   1              if(y<15)
 190   1                      if(sblock[y+1] & showbox[2])    return 1;
 191   1              if(y<14)
 192   1                      if(sblock[y+2] & showbox[3])    return 1;
 193   1              
 194   1              return 0;
 195   1      }
 196          
 197          static void TetrisDisp() //0:只扫描静态图像 1:静态和动态图像同时扫描
 198          {
 199   1              uint p;
 200   1              for(p=0;p<16;p++)
 201   1                      DispRAM[p] = sblock[p];
 202   1              
 203   1              for(p=y;p<y+4;p++)
 204   1                      if(p<16) DispRAM[p] |= showbox[p-y];    
 205   1      
 206   1              MatxDisp(DispRAM,duty);
 207   1      }
 208          
 209          static void RowFull()   //检测是否满行并相关处理
 210          {
 211   1              uint8 p,k;
 212   1              uint8 tmps=0;
 213   1              for(p=0;p<16;p++)
 214   1              {
 215   2                      if(sblock[p] == 0xff)
 216   2                      {
 217   3                              char c = 4;     //闪烁次数
 218   3                              tmps++;
 219   3                              
 220   3                              while(c--)
 221   3                              {
 222   4                                      #define BLINKTIME 128   //满行闪烁速度
 223   4                                      uint tmpct = tms+BLINKTIME;
 224   4                                      Sound_Tone(sound_ON,5,3);
 225   4                                      sblock[p] = ~sblock[p];
 226   4                                      while(tmpct > tms)
 227   4                                      {
 228   5                                              MatxDisp(sblock,duty);
 229   5                                              SMG_Display(scores,duty);
 230   5                                      }
 231   4                              }
 232   3                              for(k=p;k<15;k++)
 233   3                              {
 234   4                                      sblock[k] = sblock[k+1];
 235   4                                      if(sblock[k] == 0x00)
 236   4                                              break;
 237   4                              }
 238   3                              p--;
 239   3                      }
 240   2              }
C51 COMPILER V9.00   TETRIS                                                                05/17/2023 19:41:50 PAGE 5   

 241   1              scores += getscore[tmps];
 242   1      }
 243          
 244          static void Tetris_Keyscan()    //
 245          {
 246   1              int8 k = Get_Kvuale(150);
 247   1      
 248   1              switch (k)
 249   1              {
 250   2                      case K_NULL:break;
 251   2                      
 252   2                      case K_LEFT:if(Check_LR(0))
 253   2                                              {
 254   3                                                      moveone(0, showbox);
 255   3                                                      x++;
 256   3                                              }
 257   2                                      break;                  
 258   2                      case K_RIGHT:if(Check_LR(1))
 259   2                                              {
 260   3                                                      moveone(1, showbox);
 261   3                                                      x--;
 262   3                                              }
 263   2                                      break;
 264   2                      case K_OK:      
 265   2                                      Sound_Tone(sound_ON & !(AUXR & 0x10),2,8);
 266   2                                      SpinBox();                              
 267   2                                      break;
 268   2              }
 269   1              
 270   1              if(KEY_DOWN==0)
 271   1                      speeds = MAXSPEED;//当down按下时切换到最大速度方块下坠
 272   1              else speeds = NORSPEED;//没按时恢复正常速度
 273   1      }
 274          static void Tetris_Init()
 275          {
 276   1              uint i;
 277   1              for(i=0;i<16;i++)       //清除静态内存
 278   1                      sblock[i]=0x00;
 279   1              scores=0;
 280   1              keycont=0;
 281   1              keypad=0;
 282   1              tms=0;
 283   1              speeds = NORSPEED;
 284   1              RandBox();      //随机装载一个方块
 285   1              Glife=1;
 286   1      }
 287          
 288          void Tetris_Game()
 289          {
 290   1              Tetris_Init();
 291   1              Play_Music(sound_korobelniki);
 292   1              while(Glife)
 293   1              {
 294   2                      Tetris_Keyscan();               
 295   2                      if(tms > speeds)        //游戏速度节拍
 296   2                      {
 297   3                              tms=0;
 298   3                              if(Check_Down() == 1)   //检测动态方块是否已无法再下降
 299   3                              {
 300   4                                      sblock[y]   |= showbox[0];      //动态方块与静态图像结合
 301   4                                      if(y<15)        sblock[y+1] |= showbox[1];
 302   4                                      if(y<14)        sblock[y+2] |= showbox[2];
C51 COMPILER V9.00   TETRIS                                                                05/17/2023 19:41:50 PAGE 6   

 303   4                                      if(y<13)        sblock[y+3] |= showbox[3];
 304   4      
 305   4                                      RowFull();      //检测是否有满行,并执行先关处理                          
 306   4                                      RandBox();      //随机产生一个新方块
 307   4                                      x=0;            
 308   4                                      y=15;           //将动态方块坐标归位,迎接下一个新方块                                                           
 309   4                              }
 310   3                              else if(Check_Down() == -1)//检测到方块已堆积到极限
 311   3                              {
 312   4                                      Glife = 0;//结束游戏
 313   4                              }
 314   3                              else 
 315   3                              {
 316   4                                      y--;    //方块下降一格
 317   4                              }
 318   3                      }
 319   2                      TetrisDisp();//刷新游戏图像
 320   2                      SMG_Display(scores,duty);
 321   2              }
 322   1              TR2_OFF;
 323   1      }
 324          
 325          
 326          
 327          
 328          
 329          
 330          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2096    ----
   CONSTANT SIZE    =    104    ----
   XDATA SIZE       =     23      20
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       2
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
